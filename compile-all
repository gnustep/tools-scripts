#!/bin/bash

#
# Run this script as root to configure, compile and install
# gnustep-make, gnustep-base, gnustep-gui, gnustep-back
# with a single command
#
# Examples:
#
# ./compile-all
#
# <uses `--prefix=/usr/GNUstep' as option to configure>
#
# ./compile-all /usr/local/GNUstep
#
# <uses `--prefix=/usr/local/GNUstep' as option to configure>
#

CPUS=`nproc`
SUDO='sudo LD_LIBRARY_PATH=$LD_LIBRARY_PATH'
KERNEL=`uname -s | awk '{print tolower($0)}'`
scriptsdir="`pwd`/tools-scripts"

if [ "$1" != "" ]; then 
  prefix="$1"
else
  prefix="/usr/GNUstep"
fi

if [ "$2" != "" ]; then
  compiler="$2"
fi

if [ "$3" != "" ]; then
   cxxcompiler="$3"
fi

if [ "$4" != "" ]; then
  linker=$4
fi


# Check if we are compiling under windows...
UNAME=`uname | cut -d'-' -f1`
if [ "$UNAME" != "MINGW32_NT" ] ; then
  if [ ! \( -d $prefix -a -w $prefix \) ] ; then
    if [ ! \( -d $(basename $prefix) -a -w $(basename $prefix) \) ] ; then
      NEEDSROOT="true"
    fi
  fi  
fi

# Get architecture
ARCH=`uname -m`

# If we are installing into home, then we do not need root...
if 
   echo $prefix | grep "^/home/"
then
   unset NEEDSROOT
   make_flags="--disable-importing-config-file"
fi

if gmake -v >/dev/null 2>&1
then
  export MAKE="gmake -j${CPUS}"
else
  export MAKE="make -j${CPUS}"
fi

if [ "$2" == "" ]; then
  export CC=gcc
else
  export CC="$compiler"
fi

if [ "$3" == "" ]; then
  export CXX=g++
else
  export CXX=$cxxcompiler
fi

if [[ "$CC" == gcc* ]]; then
  USING_GCC=true
else
  USING_GCC=false
fi

if [ "$4" == "" ]; then
  if ! $USING_GCC; then
    linker=ld.gold
  fi
else
  LD=$(which "$linker")
  if $USING_GCC; then
    # We must create a directory and symlink the linker into there.
    mkdir temp_linker_dir
    cd temp_linker_dir
      ln -s "$LD" ./ld
    cd ..
    export LDFLAGS="$LDFLAGS -B$(realpath temp_linker_dir)"
  else
    # Clang allows constructions such as -fuse-ld=/usr/bin/ld.lld-18
    export LDFLAGS="$LDFLAGS -fuse-ld=$LD"
  fi
fi
echo "==== compile-all"
echo "Using compiler $CC"
echo "Using c++ compiler $CXX"
if [ "$4" == "" ]; then
  echo "Using default linker"
else
  echo "Using linker $LD"
fi
echo "===="

# Flags for windows build.
if [ "$UNAME" == "MINGW32_NT" ] ; then
  export cc_flags="-fstrict-aliasing -fno-omit-frame-pointer"
fi

# If we are building with clang, then add this to cc_flags
if ! $USING_GCC; then
    export cc_flags="-fblocks -fobjc-nonfragile-abi ${cc_flags}"
fi

# Install make
echo "Installing GNUstep into ${prefix}"
cd tools-make
# make distclean
if $USING_GCC; then
    echo "==== BUILDING WITH GCC"
    echo "Build command: CCFLAGS=$cc_flags CC=$CC ./configure --prefix=${prefix} --with-library-combo=gnu-gnu-gnu --with-layout=gnustep $make_flags"

    echo "===="
    CCFLAGS=$cc_flags CXX=$CXX CC=$CC ./configure --prefix=${prefix} --with-library-combo=gnu-gnu-gnu --with-layout=gnustep ${make_flags}
else
    echo "==== BUILDING WITH CLANG"
    unset CC
    unset CXX

    # Assume the presence of libdispatch if we are using clang and libobjc2
    export CC=${compiler}
    export CXX=${cxxcompiler}
    # export LDFLAGS=-ldispatch
    echo "LDFLAGS=$LDFLAGS"
    echo "Build command: CCFLAGS=${cc_flags} CXX=${CXX} CC=${CC} ./configure --prefix=${prefix} --with-library-combo=ng-gnu-gnu --enable-objc-arc --enable-native-objc-exceptions --with-layout=gnustep ${make_flags}"
    CCFLAGS=${cc_flags} CXX=${CXX} CC=${CC} ./configure --prefix=${prefix} --with-library-combo=ng-gnu-gnu --enable-objc-arc --enable-native-objc-exceptions --with-layout=gnustep ${make_flags}
fi

# Install make after configuration...
echo "======== Installing Make..."
$MAKE
if [ "true" == "$NEEDSROOT" ]; then
    ${SUDO} -u root $MAKE install
else
    $MAKE install
fi 
. $prefix/System/Library/Makefiles/GNUstep.sh

# Setup clang specific libraries...
if ! $USING_GCC; then
    ${scriptsdir}/clang-setup "$CLANG" "$CLANGPP"
fi

# Install base
echo "======== Installing Base..."
cd ../libs-base
make distclean
. $prefix/System/Library/Makefiles/GNUstep.sh
LDFLAGS="$LDFLAGS -ldispatch" $MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM debug=yes || exit 1
if [ "true" == "$NEEDSROOT" ]; then
${SUDO} -u root ./install.sh $prefix $MAKE
else
$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM install
fi

# Install gui
echo "======== Installing GUI..."
cd ../libs-gui
make distclean
. $prefix/System/Library/Makefiles/GNUstep.sh
./configure --enable-imagemagick
$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM debug=yes
if [ "true" == "$NEEDSROOT" ]; then
${SUDO} -u root ./install.sh $prefix $MAKE
else
$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM install
fi

# Install back
echo "======== Installing Backend..."
cd ../libs-back
make distclean
. $prefix/System/Library/Makefiles/GNUstep.sh
$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM debug=yes
if [ "true" == "$NEEDSROOT" ]; then
${SUDO} -u root ./install.sh $prefix $MAKE
else
$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM install
fi

# Perform other operations
echo "Add script to etc and xsession..."
if [ ! -e /etc/profile.d/GNUstep.sh ]; then
   ${SUDO} -u root ln -s /usr/GNUstep/System/Library/Makefiles/GNUstep.sh /etc/profile.d/GNUstep.sh
fi
cd ../plugins-session
${SUDO} -u root ./install.sh
echo "Done."
